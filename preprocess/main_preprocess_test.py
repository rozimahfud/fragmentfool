import os
import sys
import networkx as nx

from tqdm import tqdm

from preprocess.joern_preprocess import *
from preprocess.preprocess_test import *
from perturbation.perturbation_test import *

def main_preprocess(preprocess_method,data_idx,targets,out_path,NODE_TYPE_DICT,perturb_config=None):
	datalist = []

	if not perturb_config is None:
		# define N which is the number of data for perturbation
		N = len([i for i in targets.values() if i ==perturb_config["perturb_target"]])

		# generate random perturb list to randomly chose which one is perturbed
		perturb_list = generate_binary_list(N,perturb_config["k"])

	for file_name in tqdm(data_idx):
		y = targets[file_name]
		
		path = out_path + str(file_name) + ".dot"
		cpg = nx.Graph(nx.nx_pydot.read_dot(path))

		# get "./data/<dataset name>/" from out_path
		last_dir = out_path.split("/")[-2]
		root_path = out_path.split(last_dir)[0]
		
		# make ast path
		dot_ast_path = root_path + "ast/" + str(file_name) + "/1-ast.dot"

		# if ast has not been generated by JOERN, we generate a c file with JOERN
		if not os.path.exists(dot_ast_path):
			c_file_path = root_path + str(file_name) + ".c"
			result = generate_JOERN(c_file_path,root_path + "ast/","ast")

		ast = nx.Graph(nx.nx_pydot.read_dot(dot_ast_path))
		ast = cpg_to_ast(cpg,ast)

		new_ast = nx.dfs_tree(ast, source=list(ast.nodes)[0])
		new_ast.add_nodes_from((i,ast.nodes[i]) for i in new_ast.nodes)

		# doing perturbation if it is set
		if not perturb_config is None:
			if y == perturb_config["perturb_target"]:
				isPerturb = perturb_list.pop()

				if isPerturb == 1:
					if perturb_config["perturb_type"] == "1":
						new_ast = perturb_one(cpg,ast,file_name)
					else:
						sys.exit("== There is no such perturbation type ==")

		# preprocessing based on the method selected
		if preprocess_method == "1":
			data = preprocess_one(new_ast,y,NODE_TYPE_DICT)
		else:
			sys.exit("== There is no such preprocessing method ==")

		datalist.append(data)

	return datalist